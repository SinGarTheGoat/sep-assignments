Q1- What's the Big-O of the following algorithm? Submit your work and
    reasoning with your solution.
    def goodbye_world(n)
      puts "Goodbye World! #{n}"
    end
A1- It is constant, because it takes the same amount of time regardless of the
    input

Q2- What's the Big-O of the following algorithm? Submit your work and
    reasoning with your solution.
    def find_largest(collection)
      largest = collection[0]
      collection.length.times do |i|
        if collection[i] >= largest
          largest = collection[i]
        end
      end
    largest
    end
A2- This bloc is leniar because the time it will take to excute is directly tied
    to how big the collection is.

Q3- What's the Big-O of the following algorithm? Submit your work and reasoning
    with your solution.
    def find_largest(collection)
      largest = collection[0][0]
      collection.length.times do |i|
        subcollection = collection[i]
        subcollection.length.times do |i|
          if subcollection[i] >= largest
            largest = subcollection[i]
          end
        end
      end
    largest
    end
A3- This is quadradic with a big O score of n^2 because it has a loop nested
    inside of a loop.

Q4- What's the Big-O of the following algorithm? Submit your
    work and reasoning with your solution.
    def numbers(n)
      if (n == 0)
        return 0
      elsif (n == 1)
        return 1
      else
        return numbers(n-1) + numbers(n-2)
      end
    end
A4- This equastion is leinar because it is only being called a set number of
    times.

Q5- What's the Big-O of the following algorithm? Submit your work and
    reasoning with your solution.

    def iterative(n)
      num1 = 0
      num2 = 1

      i = 0
      while i < n-1
        tmp = num1 + num2
        num1 = num2
        num2 = tmp
        i+=1
      end

      num2
    end
A5- This is leinar because the function will take as long perportionaly to how
    big the number n is.

Q6- What's the Big-O of the following algorithm? Submit your work and
    reasoning with your solution.
    def sort(collection, from=0, to=nil)





A6-
