Q1- Describe an analogy for relating an algorithm that has efficiency O(1) and
    another algorithm that has O(2^n). An example would be:
A2- The O(1) is constant  O(2^n) is exponential
Q2- In plain English, what is the best case scenario for binary search?
Q3- With a binary search as with all searches the best case is when the first
    inspected is the desired one. for this to occur with a binary search the
    item would need to be in the exact middle.

Q3- In plain English, what is the worst-case scenario for binary search?
A3-this would be if the desired object is at one of the extreme ends.

Q4- In plain English, what is the bounded-case scenario for binary search?
A4- the bounded case is the average of the best case and worst case scenarios.

Q5- Create graph

Q6- What's the asymptotic limit as n approaches infinity for the function
    defined by the values above?
A6- 11... It a approaches but never reaches 11.

Q7- What is the Big-O of an algorithm that has the data points above?
A7- O(2^n)

Q8- Write a Ruby script that calculates and prints the N number, given an
    iteration, for linear search in the worst case (similar to the graph above).
A8- Is this cheating?
    def num_o_iterations(array)
      array.length
    end

Q9- Create a graph from the output using Google Sheets or other graphing
    software. Analyze the graph and denote its Big-O somewhere on the graph.
A9-

Q10-  What is the Big-O of binary search?
A10-  In a sorted array of n values, the worst case for a binary search
      is O(log n) the run-time of binary search for a value, is O(log n).

Q11-  What is the Big-Ω of binary search?
A11-  The best case for a binary search is if the desired element is in the
      exact middle, this results in a constant time of O(1)

Q12-  What is the Big-Ө of binary search?
A12-  The average of the two cases still comes out to O(log n).
